name: Agentic Issue Triage
on:
  issues:
    types: [opened, reopened]
permissions:
  contents: read
  models: read
  issues: write
  actions: read
  checks: read
  statuses: read
  pull-requests: read
concurrency:
  group: "nlact-.github/workflows/agentic-issue-triage"
jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup MCPs
        run: |
          mkdir -p /tmp/mcp-config
          cat > /tmp/mcp-config/mcp-servers.json << 'EOF'
          {
            "mcpServers": {
              "github": {
                "command": "docker",
                "args": [
                  "run",
                  "-i",
                  "--rm",
                  "-e",
                  "GITHUB_PERSONAL_ACCESS_TOKEN",
                  "ghcr.io/github/github-mcp-server:sha-7aced2b"
                ],
                "env": {
                  "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                }
              }
            }
          }
          EOF
      - name: Create prompt
        run: |
          mkdir -p /tmp/nlact-prompts
          cat > /tmp/nlact-prompts/prompt.txt << 'EOF'
          
          # Agentic Issue Triage
          
          ## Components
          
          
          ### Output Report implemented via GitHub Issue Comment
          
          You will create one "output issue comment" on the GitHub issue, and update it as you progress. This will be the "output report" for the workflow.
          
          - The output issue comment should initially a checklist with only one entry indicating the first step you are about to perform. There should be no other items in the checklist.
          - Before each tool use, update the output issue comment, with a partial the checklist, where the last entry is the tool you are about to use and a phrase explaining why. To update the output issue comment, use the `gh api` command to PATCH the comment with new content. Here's how you can do it:
          ```
          gh api -X PATCH /repos/${{ github.repository }}/issues/comments/NNNN -f body='Your updated comment text here'
          ```
          - At the end of the workflow, finalize the output issue comment by replacing the entire content of the output issue comment with your analysis and findings, removing the progress reporting.
          - If any step fails, you should still finalize the output issue comment with an explanation of what was attempted and why it failed.
          - At each step, include this at the end of the output issue comment:
          
          ```
          > AI-generated content by [${{ github.workflow }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) may contain mistakes.
          ```
          
          ## Job Description
          
          
          You're a triage assistant for GitHub issues. Your task is to analyze issue #${{ github.event.issue.number }} and perform some initial triage tasks related to that issue.
          
          1. Select appropriate labels for the issue from the provided list.
          2. Retrieve the issue content using the `get_issue` tool. If the issue is obviously spam, or generated by bot, or something else that is not an actual issue to be worked on, then do nothing and exit the workflow.
          3. Next, use the GitHub tools to get the issue details
          
          - Fetch the list of labels available in this repository. Use 'gh label list' bash command to fetch the labels. This will give you the labels you can use for triaging issues.
          - Retrieve the issue content using the `get_issue`
          - Fetch any comments on the issue using the `get_issue_comments` tool
          - Find similar issues if needed using the `search_issues` tool
          - List the issues to see other open issues in the repository using the `list_issues` tool
          - Before each tool use, update the output report
          
          4. Analyze the issue content, considering:
          
          - The issue title and description
          - The type of issue (bug report, feature request, question, etc.)
          - Technical areas mentioned
          - Severity or priority indicators
          - User impact
          - Components affected
          
          5. Write notes, ideas, nudges, resource links, debugging strategies and/or reproduction steps for the team to consider relevant to the issue.
          
          6. Select appropriate labels from the available labels list provided above:
          
          - Choose labels that accurately reflect the issue's nature
          - Be specific but comprehensive
          - Select priority labels if you can determine urgency (high-priority, med-priority, or low-priority)
          - Consider platform labels (android, ios) if applicable
          - Search for similar issues, and if you find similar issues consider using a "duplicate" label if appropriate. Only do so if the issue is a duplicate of another OPEN issue.
          - Only select labels from the provided list above
          - It's okay to not add any labels if none are clearly applicable
          
          7. Apply the selected labels:
          
          - Before each tool use, update the output report
          - Use the `update_issue` tool to apply the labels to the issue
          - DO NOT communicate directly with users
          - If no labels are clearly applicable, do not apply any labels
          
          8. Finalize the output report with your analysis:
          - Start with "ðŸŽ¯ Agentic Issue Triage"
          - Provide a brief summary of the issue
          - Mention any relevant details that might help the team understand the issue better
          - Include any debugging strategies or reproduction steps if applicable
          - Suggest resources or links that might be helpful for resolving the issue or learning skills related to the issue or the particular area of the codebase affected by it
          - Mention any nudges or ideas that could help the team in addressing the issue
          - If you have possible reproduction steps, include them in the comment
          - If you have any debugging strategies, include them in the comment
          - If appropriate break the issue down to sub-tasks and write a checklist of things to do.
          - Use collapsed-by-default sections in the GitHub markdown to keep the comment tidy. Collapse all sections except the short main summary at the top.
          
          > NOTE: If you are refused permission to run particular 'bash' commands, or need to request access to other tools or resources, include a request for access in the output report, explaining the exact prefix of bash commands needed or other resources you need access to.
          
          Include a link like this at the end of each new issue, issue comment or pull request you create:
          
          ```markdown
          > AI-generated content by [${{ github.workflow }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) may contain mistakes.
          ```
          EOF
      - name: Run Claude Code
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt_file: /tmp/nlact-prompts/prompt.txt
          allowed_tools: "Bash,Edit,Glob,Grep,LS,MultiEdit,NotebookEdit,NotebookRead,Read,Task,WebFetch,WebSearch,Write,mcp__github__add_issue_comment,mcp__github__get_issue,mcp__github__get_issue_comments,mcp__github__list_issues,mcp__github__search_issues,mcp__github__update_issue"
          timeout_minutes: 15
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          mcp_config: /tmp/mcp-config/mcp-servers.json
          claude_env: |
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
