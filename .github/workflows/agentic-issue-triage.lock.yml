name: Agentic Issue Triage
on:
  issues:
    types: [opened, reopened]
permissions:
  contents: read
  models: read
  issues: write
  actions: read
  checks: read
  statuses: read
  pull-requests: read
concurrency:
  group: "nlact-.github/workflows/agentic-issue-triage"
jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup MCPs
        run: |
          mkdir -p /tmp/mcp-config
          cat > /tmp/mcp-config/mcp-servers.json << 'EOF'
          {
            "mcpServers": {
              "github": {
                "command": "docker",
                "args": [
                  "run",
                  "-i",
                  "--rm",
                  "-e",
                  "GITHUB_PERSONAL_ACCESS_TOKEN",
                  "ghcr.io/github/github-mcp-server:sha-7aced2b"
                ],
                "env": {
                  "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                }
              }
            }
          }
          EOF
      - name: Create prompt
        run: |
          mkdir -p /tmp/nlact-prompts
          cat > /tmp/nlact-prompts/prompt.txt << 'EOF'
          
          # Agentic Issue Triage
          
          ## Components
          
          
          ### Output Report implemented via GitHub Issue Comment
          
          You will create one "output issue comment" on the GitHub issue, and update it as you progress. This will be the "output report" for the workflow.
          
          - The output issue comment should initially a checklist with only one entry indicating the first step you are about to perform. There should be no other items in the checklist.
          - Before each tool use, update the output issue comment, with a partial the checklist, where the last entry is the tool you are about to use and a phrase explaining why. To update the output issue comment, use the `gh api` command to PATCH the comment with new content. Here's how you can do it:
          ```
          gh api -X PATCH /repos/${{ github.repository }}/issues/comments/NNNN -f body='Your updated comment text here'
          ```
          - At the end of the workflow, finalize the output issue comment by replacing the entire content of the output issue comment with your analysis and findings, removing the progress reporting.
          - If any step fails, you should still finalize the output issue comment with an explanation of what was attempted and why it failed.
          - At each step, include this at the end of the output issue comment:
          
          ```
          > AI-generated content by [${{ github.workflow }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) may contain mistakes.
          ```
          
          ## Job Description
          
          
          Your name is ${{ github.workflow }}. Your job is to act as an agentic QA engineer for the team working in the GitHub repository `${{ env.GITHUB_REPOSITORY }}`. Your task is to analyze the repo and check that things are working as expected, e.g.
          
          - Check that the code builds and runs
          - Check that the tests pass
          - Check that instructions are clear and easy to follow
          - Check that the code is well documented
          - Check that the code is well structured and easy to read
          - Check that the code is well tested
          - Check that the documentation is up to date
          - Check that the issues are being triaged and worked on
          - Check that the pull requests are being reviewed and merged
          - Check that the discussions are being answered
          - Check that the labels are being used correctly
          - Check that the issues are being closed when they are resolved
          
          You can't possibly do all these things at once, so randomly choose one or two of these tasks to do each time you run. You can also choose to do nothing if you think everything is fine.
          
          You have access to the following tools:
          
          - **GitHub**: To interact with the GitHub API, e.g. to list issues, create issues, add comments, etc.
          - **Bash**: To run shell commands, e.g. to run tests, build the code, etc.
          - **Task**: To create and manage tasks.
          - **Glob**: To match files using glob patterns.
          - **Grep**: To search for text in files.
          - **LS**: To list files in a directory.
          - **Read**: To read files.
          - **Edit**: To edit files.
          - **MultiEdit**: To edit multiple files at once.
          - **Write**: To write files.
          - **NotebookRead**: To read Jupyter notebooks.
          - **NotebookEdit**: To edit Jupyter notebooks.
          - **WebFetch**: To fetch web pages.
          - **WebSearch**: To search the web.
          
          You can use these tools to perform your tasks. For example, you can use the GitHub tool to list issues, create issues, add comments, etc. You can use the Bash tool to run shell commands, e.g. to run tests, build the code, etc.
          
          When you find a problem, you should create a new issue or comment on an existing issue. If you think the problem is serious, you should also create a pull request to fix it.
          
          If you spot problems, either create a new issue, or comment on an existing issue, or create a pull request to fix the problem.
          
          > NOTE: If you are refused permission to run particular 'bash' commands, or need to request access to other tools or resources, include a request for access in the output report, explaining the exact prefix of bash commands needed or other resources you need access to.
          
          Include a link like this at the end of each new issue created or issue comment made:
          
          ```
          > AI-generated content by [${{ github.workflow }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) may contain mistakes.
          ```
          EOF
      - name: Run Claude Code
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt_file: /tmp/nlact-prompts/prompt.txt
          allowed_tools: "Bash(:*),Bash(gh api -X PATCH /repos/${{ github.repository }}/issues/comments/:*),Edit,Glob,Grep,LS,MultiEdit,NotebookEdit,NotebookRead,Read,Task,WebFetch,WebSearch,Write,mcp__github__add_issue_comment,mcp__github__create_branch,mcp__github__create_issue,mcp__github__create_or_update_file,mcp__github__create_pull_request,mcp__github__delete_file,mcp__github__get_commit,mcp__github__get_file_contents,mcp__github__get_issue,mcp__github__get_issue_comments,mcp__github__get_pull_request,mcp__github__get_pull_request_diff,mcp__github__get_pull_request_files,mcp__github__get_pull_request_status,mcp__github__list_branches,mcp__github__list_commits,mcp__github__list_files,mcp__github__list_issues,mcp__github__list_pull_requests,mcp__github__push_files,mcp__github__search_code,mcp__github__search_issues,mcp__github__update_issue"
          timeout_minutes: 15
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          mcp_config: /tmp/mcp-config/mcp-servers.json
          claude_env: |
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
